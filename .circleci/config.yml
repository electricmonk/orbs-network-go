version: 2
jobs:
  tests:
    docker:
      - image: circleci/golang:1.12.9
    resource_class: large
    steps:
      - run: sudo apt update && sudo apt install ca-certificates libgnutls30 -y
      - checkout
      - run: go get -u github.com/orbs-network/go-junit-report
      - run:
          command: ./test.sh
          no_output_timeout: 15m
      - store_artifacts:
          path: _out
          destination: test-output
      - store_artifacts:
          path: _reports
          destination: test-results
      - store_test_results:
          path: _reports

  races:
    docker:
      - image: circleci/golang:1.12.9
    resource_class: large
    steps:
      - run: go get -u github.com/orbs-network/go-junit-report
      - checkout
      - run:
          command: ./test.races.sh
          no_output_timeout: 25m
      - store_artifacts:
          path: _out
          destination: test-output
      - store_artifacts:
          path: /go/src/github.com/orbs-network/orbs-network-go/_reports
          destination: test-results
      - store_test_results:
          path: _reports

  memory_leaks:
    docker:
      - image: circleci/golang:1.12.9
    resource_class: xlarge
    steps:
      - run: go get -u github.com/orbs-network/go-junit-report
      - checkout
      - run: ./test.goroutine-leaks.sh
      - run: ./test.memory-leaks.sh

  flakiness:
    docker:
      - image: itamararjuan/golang_with_node_aws
    parallelism: 6
    resource_class: xlarge
    steps:
      - run: go get -u github.com/orbs-network/go-junit-report
      - checkout
      - run:
          command: ./test.flakiness.sh
          no_output_timeout: 25m
      - store_artifacts:
          path: _out
          destination: test-output
      - store_artifacts:
          path: /go/src/github.com/orbs-network/orbs-network-go/_reports
          destination: test-results
      - store_test_results:
          path: _reports

  nightly:
    docker:
      - image: circleci/golang:1.12.9
    parallelism: 6
    resource_class: xlarge
    steps:
      - run: go get -u github.com/orbs-network/go-junit-report
      - checkout
      - run:
          command: ./.circleci/nightly.sh
          no_output_timeout: 300m
      - store_artifacts:
          path: _out
          destination: test-output
      - store_artifacts:
          path: /go/src/github.com/orbs-network/orbs-network-go/_reports
          destination: test-results
      - store_test_results:
          path: _reports

  node_docker_build:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    steps:
      - run: go get -u github.com/orbs-network/go-junit-report
      - checkout
      - run: ./docker/build/build-docker-node.sh
      - run: ./.circleci/release-node-to-staging.sh

  circleci_scripts:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - run: npm install
      - run: npm test

  gamma_docker_build:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    steps:
      - run: go get -u github.com/orbs-network/go-junit-report
      - checkout
      - run: ./docker/build/build-docker-gamma.sh
      - run: ./.circleci/release-gamma-to-staging.sh

  release-gamma:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run: ./.circleci/release-gamma.sh

  node_e2e:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    steps:
      - run: go get -u github.com/orbs-network/go-junit-report
      - checkout
      - run: ./.circleci/install-go.sh
      - run: ./.circleci/install-node.sh #TODO is this really needed?
      - run: ./.circleci/install-docker-compose.sh
      - run: ./docker/test/import-node-staging.sh
      # Logs here belong to root
      - run: sudo rm -rf _logs
      - run:
          command: ./docker/test/test.sh
          name: "Docker test with Lean Helix Consensus"
          environment:
            CONSENSUSALGO: leanhelix
      - store_test_results:
          path: _reports
      - store_artifacts:
          path: _logs
      - store_artifacts:
          path: _out

  gamma_e2e:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    steps:
      - run: go get -u github.com/orbs-network/go-junit-report
      - checkout
      - run: ./.circleci/install-go.sh
      - run: ./.circleci/install-node.sh #TODO is this really needed?
      - run: ./.circleci/install-docker-compose.sh
      - run: ./docker/test/import-gamma-staging.sh
      - run: ./docker/test/gamma-e2e.sh
      - store_test_results:
          path: _reports
      - store_artifacts:
          path: _out

# TODO re-enable if Ethereum access (with refTime based finality) is restored to test it
#  ganache_related_tests:
#    machine:
#      image: ubuntu-1604:201903-01
#    steps:
#      - run: go get -u github.com/orbs-network/go-junit-report
#      - checkout
#      - run: ./.circleci/install-go.sh
#      - run: ./docker/test/ganache-related-test.sh
#      - store_artifacts:
#          path: _out
#          destination: test-output
#      - store_test_results:
#          path: _reports

workflows:
  version: 2
  build:
    jobs:
      - tests:
          filters:
            tags:
              only: /^v.*/
      - races:
          filters:
            tags:
              only: /^v.*/
      - memory_leaks:
          filters:
            tags:
              only: /^v.*/
      - circleci_scripts:
          filters:
            tags:
              only: /^v.*/
      - flakiness:
          filters:
            tags:
              only: /^v.*/
# TODO re-enable if Ethereum access (with refTime based finality) is restored to test it
#      - ganache_related_tests:
#          filters:
#            tags:
#              only: /^v.*/
      - node_docker_build:
          filters:
            tags:
              only: /^v.*/
      - gamma_docker_build:
          filters:
            tags:
              only: /^v.*/
      - node_e2e:
          requires:
            - node_docker_build
          filters:
            tags:
              only: /^v.*/
      - gamma_e2e:
          requires:
            - gamma_docker_build
          filters:
            tags:
              only: /^v.*/
      - release-gamma:
          requires:
            - gamma_e2e
          filters:
            tags:
              only: /^v.*/
            branches:
              only: master

  nightly:
    triggers:
      - schedule:
          cron: "0 23 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - nightly
